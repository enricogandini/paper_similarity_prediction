#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Created on Fri Mar 26 15:14:34 2021
# Copyright Â© Enrico Gandini <enricogandini93@gmail.com>
#
# Distributed under terms of the MIT License.

"""Utils necessary to store data generated by 'Molecular Similarity Survey'
web app into an SQL database.
"""

from sqlalchemy import Column, Integer, String, Date, Boolean, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import create_engine
from sqlalchemy.orm import relationship
from sqlalchemy.orm import sessionmaker


HexUUID = String(32)


Base = declarative_base()    


class MolecularPair(Base):
    __tablename__ = "MolecularPairs"
    
    id = Column(Integer, primary_key=True)
    
    answers = relationship("Answer")


class User(Base):
    __tablename__ = "Users"
    
    id = Column(HexUUID, primary_key=True)
    date = Column(Date, nullable=False)
    status = Column(String, default="Captcha")
    display_above = Column(String)
    experience = Column(String)
    
    answers = relationship("Answer", back_populates="user")


class Answer(Base):
    __tablename__ = "Answers"
    
    id = Column(Integer, primary_key=True)
    id_user = Column(HexUUID, ForeignKey("Users.id"))
    id_pair = Column(Integer, ForeignKey("MolecularPairs.id"), nullable=False)
    similar = Column(String, nullable=False)
    
    user = relationship("User", back_populates="answers")


def create_db_engine_and_session(db_objects: dict):
    """Add an `Engine` and a `Session`
to a dictionary that stores database properties.
Using this dictionary is important for the survey app:
the dictionary is globally accessible by all functions
in the async loop of the app."""
    db_objects["engine"] = create_engine(db_objects["url"])

    Session = sessionmaker()
    Session.configure(bind=db_objects["engine"])
    db_objects["session"] = Session()